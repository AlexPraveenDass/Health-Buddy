
:- module( forward_inference, [
    forward/4
] ).

:- use_module('../definitions.pl'). % Import operator definitions

:- meta_predicate forward(1, +, -). % Declare predicate as meta predicate for hook resolution
                                      % See : https://www.swi-prolog.org/pldoc/doc_for?object=(meta_predicate)/1

% Useful for debugging
:- det([get_knowledge/4, forward/4]).

/*
 * forward(+KnowledgeHook, +Rules, +Template, -Facts)
 *      Deduces a list of Facts matching Template from Rules and KnowledgeHook, using forward chaining inference.
 *      Rules is a set of Axioms of the form (Fact if Condition)
 *      KnowledgeHook is a hook predicate that is called to query or generate the knowledge database dynamically
 *
 *  NOTE: Not recursive 
 */
forward(Knowledge, Rules, Template, Facts):-
    infer(Knowledge, Rules, Template, Facts). % Generate facts using the knowledge gathered

/*
 * infer(+Knowledge, +Rules, +Template, -Facts)
 *      Deduces a list of Facts matching Template from Rules and Knowledge, using forward chaining inference.
 *      Knowledge is a list of knowledge of the form Knowledge-TruthValue, as generated by get_knowledge/5
 */
infer(_, [], _, []):- !. % Stop condition, when Rules = []
infer(Knowledge, [Rule|Rules], Template, [Fact1|Facts]):- % If Rule can be infered from Knowledge, add Fact1 to the list of Facts
    infer(Knowledge, Rule, Template, Fact1), !,
    infer(Knowledge, Rules, Template, Facts). % And check the other rules
infer(Knowledge, [_|Rules], Template, Facts):- !, % Otherwise, just check the other rules
    infer(Knowledge, Rules, Template, Facts).

infer(Knowledge, Fact if Condition, Template, Fact):-
    \+ \+ Fact = Template, % If Fact matches Template, try to prove Condition
    % For proper semantics, we could make a copy of Fact and Template, and assign
    % the output to the union of the two, but that is unnecessary for this project
    prove(Knowledge, Condition).

/*
 * prove(+Knowledge, Condition)
 *      Try to prove Condition using Knowledge
 *      Knowledge is a list of knowledge of the form Knowledge-TruthValue, as generated by get_knowledge/5
 */
prove(Knowledge, Condition1 and Condition2):- % Conjunction of facts
    prove(Knowledge, Condition1),
    prove(Knowledge, Condition2).
prove(Knowledge, know(K)):- member(K-true, Knowledge), !. % Check that K is in the list of Knowledge and is true
